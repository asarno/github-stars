{"version":3,"sources":["components/styled/index.tsx","components/Search.tsx","api/index.ts","api/search.ts","hooks/search.ts","components/Loader.tsx","components/Repository.tsx","components/List.tsx","components/Home.tsx","components/NotFound.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","FlexRow","FlexColumn","Link","span","Search","setQuery","type","setType","useState","value","setValue","Tabs","indicatorColor","textColor","onChange","e","t","style","margin","Tab","label","TextField","variant","target","Button","color","onClick","authedFetcher","axios","create","baseURL","process","transformData","data","name","owner","login","avatar","avatar_url","repos","sort","a","b","stargazers_count","map","repo","id","full_name","language","html_url","fullName","stars","url","get","status","assert","equal","useSearch","entry","useSWR","search","error","isLoading","props","isFullscreen","StyledLoader","BounceLoader","center","Loader","size","loading","StyledPaper","Paper","Icon","i","Repository","window","open","alignItems","className","displayType","thousandSeparator","Avatar","src","Name","List","query","justifyContent","length","key","response","message","Home","NotFound","history","useHistory","push","App","basename","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.4605d78e.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Container = styled.div`\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    margin-top: 2rem;\n`;\n\nconst FlexRow = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    width: 100%;\n    max-width: 80vw;\n    flex-wrap: wrap;\n`;\n\nconst FlexColumn = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    margin: 1rem;\n`;\n\nconst Link = styled.span`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #007aff;\n    cursor: pointer;\n    margin: 1rem;\n`;\n\nexport {\n    FlexRow,\n    FlexColumn,\n    Container,\n    Link,\n}\n","import React, { useState } from 'react';\nimport { FlexColumn } from './styled';\nimport { Tabs, Tab, TextField, Button } from '@material-ui/core';\n\ninterface Props {\n    setQuery: (newValue: any) => void;\n    setType: (newValue: any) => void;\n    type: string;\n}\n\nconst Search: React.FC<Props> = ({\n    setQuery,\n    type,\n    setType,\n}) => {\n    const [value, setValue] = useState('');\n\n    return (\n            <FlexColumn>\n                <Tabs\n                    value={type}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    onChange={(e, t) => setType(t)}\n                    style={{ margin: '1rem' }}\n                >\n                    <Tab label=\"users\" value=\"users\" />\n                    <Tab label=\"orgs\" value=\"orgs\" />\n                </Tabs>\n                <TextField\n                    label={`enter ${type}`}\n                    variant=\"outlined\"\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                    style={{ margin: '1rem' }}\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => setQuery(value)}\n                    style={{ margin: '1rem' }}\n                >\n                    search\n            </Button>\n            </FlexColumn>\n    )\n}\n\nexport default Search;","import axios from \"axios\";\nconst {\n    REACT_APP_API_BASE,\n} = process.env;\n\n// This is where I would setup interceptors to alter whatever necessary (Authorization Headers, Error Handling, etc.)\n// Since this API accepts apikey as a queryParam, there is very little setup required here.\n\nexport const authedFetcher = axios.create({\n    baseURL: REACT_APP_API_BASE,\n});","import { authedFetcher } from './index';\nimport { strict as assert } from \"assert\";\n\nexport interface Repo {\n    id: string;\n    name: string;\n    owner: any;\n    full_name: string;\n    stargazers_count: number;\n    language: string;\n    html_url: string;\n}\nexport interface RepositoryProps {\n    id: string;\n    name: string;\n    avatar: string;\n    fullName: string;\n    stars: number;\n    language: string;\n    url: string;\n}\n\nfunction transformData(data: Repo[]) {\n    return {\n        name: data[0].owner.login,\n        avatar: data[0].owner.avatar_url,\n        repos: data.sort((a: Repo, b: Repo) => b.stargazers_count - a.stargazers_count).map((repo: Repo) => {\n            const {\n                id,\n                name,\n                owner,\n                full_name,\n                stargazers_count,\n                language,\n                html_url,\n            } = repo;\n\n            return {\n                id,\n                name,\n                fullName: full_name,\n                avatar: owner.avatar_url,\n                stars: stargazers_count,\n                language,\n                url: html_url,\n            }\n        })\n    }\n}\n\nexport async function search(name: string, type: string): Promise<any> {\n    if (name !== \"\") {\n        const { status, data } = await authedFetcher.get(`/${type}/${name}/repos`);\n        assert.equal(status, 200);\n        return transformData(data);\n    } \n    return [];\n}","import useSWR from 'swr';\nimport { search } from '../api/search';\n\nexport function useSearch(entry: string, type: string) {\n\tconst { data, error } = useSWR(`/${type}/${entry}`, () => search(entry, type));\n\treturn { data, error, isLoading: !data && !error };\n}","import * as React from 'react';\nimport styled from 'styled-components';\nimport { BounceLoader } from \"react-spinners\";\n\nconst Container: any = styled.div`\n    height: ${(props: any) => props.isFullscreen ? '50vh' : 'auto'};\n    z-index: 11;\n`;\n\nconst StyledLoader = styled(BounceLoader)`\n\tdisplay: block;\n\tmargin: ${(props: any) => (props.center ? \"auto\" : 0)};\n`;\n\ninterface Props {\n    isLoading: boolean;\n    isFullscreen?: boolean;\n    color?: string;\n    size?: number;\n}\n\nconst Loader = ({\n    isLoading,\n    isFullscreen = false,\n    color = '#1872e0',\n    size = 50,\n}: Props) => (\n        <Container\n            isFullscreen={isFullscreen}\n        >\n            <StyledLoader\n                color={color}\n                size={size}\n                loading={isLoading}\n            />\n        </Container>\n    )\n\nexport default Loader;","import React from 'react';\nimport { Paper } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { RepositoryProps } from '../api/search';\nimport { FlexColumn, FlexRow } from './styled';\nimport NumberFormat from 'react-number-format';\n\nconst StyledPaper = styled(Paper)`\n    margin: 1rem;\n    width: 300px;\n    cursor: pointer;\n    transition: transform 1s ease-out !important;\n\n    &:hover {\n       transform: scale(1.2);\n    }\n`;\n\nconst Icon = styled.i`\n    margin-right: 1rem;\n    font-size: 1.5rem;\n    color: ${({ color }: any) => color};\n`;\n\nfunction Repository({\n    name,\n    stars,\n    language,\n    url,\n}: RepositoryProps) {\n    return (\n        <StyledPaper \n            onClick={() => window.open(url, \"_blank\")}\n        >\n            <FlexColumn\n                style={{ alignItems: 'flex-start' }}\n            >\n\n                <FlexRow style={{ margin: '0.5rem 0' }}>\n                    <Icon color=\"#0f95f5\" className=\"fas fa-user\" />\n                    <span>{name}</span>\n                </FlexRow>\n\n                <FlexRow style={{ margin: '0.5rem 0' }}>\n                    <Icon color=\"#24d167\" className=\"fas fa-star\" />\n                    <NumberFormat value={stars} displayType='text' thousandSeparator={true} />\n                </FlexRow>\n\n                <FlexRow style={{ margin: '0.5rem 0' }}>\n                    <Icon color=\"#8a22c5\" className=\"fas fa-code\" />\n                    <span>{language}</span>\n                </FlexRow>\n\n            </FlexColumn>\n        </StyledPaper>\n    );\n}\n\nexport default Repository;\n","import React from 'react';\nimport { FlexColumn, FlexRow } from './styled';\nimport { useSearch } from '../hooks/search';\nimport Loader from './Loader';\nimport Repository from './Repository';\n\nimport { RepositoryProps } from '../api/search';\nimport styled from 'styled-components';\n\nconst Avatar: any = styled.div`\n    border-radius: 50%;\n    background: ${({ src }: any) => `url('${src}')`};\n    background-position: center;\n    background-size: cover;\n    background-repeat: no-repeat;\n    width: 150px;\n    height: 150px;\n    margin-bottom: 0.5rem;\n`;\n\nconst Name: any = styled.span`\n    font-size: 1.3rem;\n`;\n\ninterface Props {\n    query: string;\n    type: string;\n}\n\nfunction List({\n    query,\n    type,\n}: Props) {\n    const { data, error, isLoading } = useSearch(query, type);\n        \n    return (\n        <FlexColumn>\n\n            {isLoading && <Loader isLoading />}\n\n            <FlexColumn>\n                <Avatar src={data?.avatar} />\n                <Name>{data?.name}</Name>\n            </FlexColumn>\n\n            <FlexRow style={{ justifyContent: 'center' }}>\n                {data && data.repos?.length > 0 && data.repos.map((repo: RepositoryProps) => <Repository key={repo.id} {...repo} /> )}\n            </FlexRow>\n\n            {error && <span>Error: {error.response.data.message}</span>}\n\n        </FlexColumn>\n    );\n}\n\nexport default List;\n","import React, { useState } from 'react';\nimport { Container } from './styled';\nimport Search from './Search';\nimport List from './List';\n\nfunction Home() {\n  const [query, setQuery] = useState('');\n  const [type, setType] = useState('users');\n\n  return (\n    <Container>\n\n      <Search\n        type={type}\n        setType={setType}\n        setQuery={setQuery}\n      />\n\n      <List\n        query={query}\n        type={type}\n      />\n\n    </Container>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Container, Link } from './styled'\nimport { useHistory } from 'react-router-dom'\n\nconst NotFound: React.FC = () => {\n    const history = useHistory()\n    return (\n        <Container>\n            <span>route not found :(</span>\n            <Link\n                onClick={() => history.push('/')}\n            >\n                return to home\n        </Link>\n        </Container>\n    )\n}\n\nexport default NotFound;","import React from 'react';\nimport Home from './Home';\nimport NotFound from './NotFound';\n\nimport {\n\tRoute,\n\tSwitch,\n\tBrowserRouter as Router,\n} from 'react-router-dom';\n\nfunction App() {\n    return (\n        <Router \n            basename={process.env.PUBLIC_URL}\n        >\n            <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route component={NotFound} />\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}